{"version":3,"sources":["components/Note.js","services/notes.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","console","log","axios","get","then","response","data","newObject","request","post","id","put","Footer","style","color","fontStyle","fontSize","Notification","message","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","noteService","initialNotes","notesToShow","filter","map","i","key","find","n","changedNote","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","target","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","type","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ef49cc6a.chunk.js","sourcesContent":["import React from 'react'\n\nconst Note = ({ note, toggleImportance }) => {\n    const label = note.important\n        ? 'make not important' : 'make important'\n\n    return (\n        <li className='note'>\n            {note.content} &nbsp;\n            <button onClick={toggleImportance}>{label}</button>    \n        </li>\n    )\n}\n\nexport default Note","import axios from 'axios'\nconst baseUrl = 'api/notes'\n\n//palauttavat promiseja\n\nconst getAll = () => {\n    console.log('promise fulfilled')\n    console.log('THIS HAPPENS ONLY ONCE')\n\n    const request = axios.get(baseUrl)\n    return request.then(\n        response =>\n            response.data\n    )\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject)\n    console.log('new submission through FORM')\n    return request.then(\n        response =>\n            response.data\n    )\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    console.log('updating importance!')\n    return request.then(\n        response =>\n            response.data\n    )\n}\n\nexport default { getAll, create, update }","import React, { useState, useEffect } from 'react'\n\nimport Note from './components/Note'\nimport noteService from './services/notes'\n\nconst Footer = () => { \n    const footerStyle = {\n        color: 'green',\n        fontStyle: 'italic',\n        fontSize: 16\n    }\n\n    return (\n        <div style={footerStyle}>\n            <br/>\n            <em>Note app, Department of Computer Science, University of Helsinki 2020</em>\n        </div>\n    )\n}\n\nconst Notification = ({ message }) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nconst App = () => {\n    const [notes, setNotes] = useState([])\n    const [newNote, setNewNote] = useState('')\n    //Näytettävien elementtien filtteröinti\n    const [showAll, setShowAll] = useState(true)\n    const [errorMessage, setErrorMessage] = useState('some error happened')\n\n    const hook = () => {\n        console.log('effect !')\n\n        noteService\n            .getAll()\n            .then(initialNotes => {\n                setNotes(initialNotes)\n\n            })\n    }\n\n    useEffect(hook, [])\n    //console.log('render', notes.length, 'notes')\n\n    const addNote = event => {\n        event.preventDefault()\n        console.log('button clicked', event.target)\n\n        const noteObject = {\n            content: newNote,\n            date: new Date().toISOString(),\n            important: Math.random() > 0.85,\n        }\n\n        noteService\n            .create(noteObject)\n            .then(returnedNote => {\n                setNotes(notes.concat(returnedNote))\n                setNewNote('')\n            })\n    }\n\n    const handleNoteChange = (event) => {\n        //console.log(event.target.value)\n        setNewNote(event.target.value)\n    }\n\n    const toggleImportanceOf = (id) => {\n        const note = notes.find(n => n.id === id)\n        const changedNote = { ...note, important: !note.important }\n\n        noteService\n            .update(id, changedNote)\n            .then(returnedNote => {\n                setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n                console.log(`importance of ${id} toggled`)\n            })\n            .catch(error => {\n                setErrorMessage(\n                    `the note '${note.content}' was already deleted from server`\n                )\n                setTimeout(() => {\n                    setErrorMessage(null)\n                }, 5000)\n\n                setNotes(notes.filter(n => n.id !== id))\n            })\n\n    }\n\n    const notesToShow = showAll\n        ? notes\n        : notes.filter(note => note.important)\n\n    return (\n        <div>\n            <h1>Notes</h1>\n            <Notification message={errorMessage} />\n            <div>\n                <button onClick={() => setShowAll(!showAll)}>\n                    show {showAll ? 'important' : 'all'}\n                </button>\n            </div>\n            <ul>\n                {notesToShow.map((note, i) =>\n                    <Note\n                        key={i}\n                        note={note}\n                        toggleImportance={() => toggleImportanceOf(note.id)}\n                    />\n                )}\n\n            </ul>\n            <form onSubmit={addNote}>\n                <input\n                    value={newNote}\n                    onChange={handleNoteChange}\n                />\n                <button type='submit'>\n                    save\n                </button>\n            </form>\n\n            <ol>\n                <li>Olen hasu</li>\n                <li>minulla on söpö..... MASU</li>\n            </ol>\n            <Footer />\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\n\nimport './index.css'\n\n  ReactDOM.render(\n    <App/>,\n    document.getElementById('root')\n  )"],"sourceRoot":""}