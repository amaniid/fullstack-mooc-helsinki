{"version":3,"sources":["components/FilterCondition.js","components/AddPerson.js","components/RenderPerson.js","services/persons.js","App.js","index.js"],"names":["Filter","filterValue","filterFunction","value","onChange","event","target","AddPerson","addContactFunction","newName","handleNameChange","newNumber","setNewNumber","onSubmit","type","Person","person","deleteContact","name","number","onClick","baseUrl","axios","get","then","response","data","newObject","post","catch","error","console","log","id","delete","Notification","message","msgColor","notificationStyle","color","backgroundColor","fontSize","borderStyle","borderRadius","padding","marginBottom","style","App","useState","persons","setPersons","setNewName","filterCondition","setFilterCondition","notification","setNotification","useEffect","personService","initialPhonebook","personsToShow","filter","toLowerCase","match","map","i","RenderPerson","key","window","confirm","setTimeout","p","preventDefault","some","returnedContact","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.70cc3059.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({filterValue, filterFunction}) => {\n    return (\n        <div>\n            find contacts:\n            <input\n                value={filterValue}\n                onChange={(event) => filterFunction(event.target.value)} />\n        </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst AddPerson = ({addContactFunction, newName, handleNameChange, newNumber, setNewNumber}) => {\n    return (\n        <form onSubmit={addContactFunction}>\n            <div>\n                name:&nbsp;\n                    <input\n                    value={newName}\n                    onChange={handleNameChange} />\n            </div>\n\n            <div>\n                number:&nbsp;\n                    <input\n                    value={newNumber}\n                    onChange={(event) => setNewNumber(event.target.value)}\n                />\n            </div>\n\n            <div>\n                <button type='submit'>ass</button>\n            </div>\n        </form>\n    )\n}\n\nexport default AddPerson","import React from 'react'\n\n\nconst Person = ({ person, deleteContact }) => {\n    return (\n        <div>\n            {person.name} {person.number}&nbsp;\n            <button onClick={deleteContact}>DELETE</button> \n        </div>\n    )\n}\n\nexport default Person","import axios from 'axios'\n\n//const baseUrl = 'http://localhost:3001/persons'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n    const request =\n    axios\n        .get(baseUrl)\n\n    return request\n        .then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios\n        .post(baseUrl, newObject)\n    \n\n    return request\n        .then(\n            response => {\n                //console.log(response)\n                return response.data\n            }\n        )\n        .catch(error => {\n            console.log('after request (services/persons.js):', error)\n        })\n}\n\nconst deleteId = id => {\n    const request = axios\n        .delete(`${baseUrl}/${id}`)\n    \n    return request\n        .then(\n            response => response.data\n        )\n}\n\nconst update = (id, newObject) => {\n    const request = axios\n        .put(`${baseUrl}/${id}`, newObject)\n\n    return request.then(\n        response => \n            response.data\n    )\n}\n\nexport default {\n    getAll,\n    create,\n    deleteId,\n    update\n}","import React, { useState, useEffect } from 'react'\n\nimport Filter from './components/FilterCondition'\nimport AddPerson from './components/AddPerson'\nimport RenderPerson from './components/RenderPerson'\n\nimport personService from './services/persons.js'\n\nconst Notification = ({ message, msgColor }) => {\n    if (message === null) {\n        return null\n    }\n\n    console.log(msgColor)\n    //console.log('')\n\n    const notificationStyle = {\n        color: msgColor,\n        backgroundColor: 'lightgray',\n        fontSize: 20,\n        borderStyle: 'solid',\n        borderRadius: 5,\n        padding: 10,\n        marginBottom: 10\n    }\n\n    return (\n        <div style={notificationStyle}>\n            {message}\n        </div>\n    )\n}\n\n\nconst App = () => {\n    const [persons, setPersons] = useState([])\n\n    const [newName, setNewName] = useState('')\n    const [newNumber, setNewNumber] = useState('+358')\n    const [filterCondition, setFilterCondition] = useState('Jorma')\n    const [notification, setNotification] = useState([null, 'green'])\n\n    const hook = () => {\n        personService\n            .getAll()\n            .then(initialPhonebook => {\n                setPersons(initialPhonebook)\n            })\n    }\n\n    useEffect(hook, [])\n\n\n    //form needs onSubmit function/action\n    // this is it\n    const addContact = (event) => {\n        event.preventDefault()\n        console.log('button clicked', event.target)\n\n        if (persons.some(person => person.name === newName) |\n            persons.some(person => person.number === newNumber)) {\n            //alert(`Name ${newName} and/or number ${newNumber} is/are already added to phonebook.`)\n            const giveNewNumber = false\n            //const giveNewNumber = window.confirm(`${newName} is already added to phonebook.`\n            // Do you want to replace the old number with a new one?`\n            //)\n            //setNewName('')\n            if (!giveNewNumber) {\n                setNotification([`Name ${newName} and/or number ${newNumber} is/are already added to phonebook.`,\n                    'red'])\n                setTimeout(() => {\n                    setNotification([null, 'green'])\n                }, 5000)\n                setNewName('')\n                setNewNumber('+358')\n                return\n            }\n\n            const person = persons.find(p => p.name === newName)\n            const personWithNewNumber = { ...person, number: newNumber }\n\n            personService\n                .update(personWithNewNumber.id, personWithNewNumber)\n                .then(newNumberOldName => {\n                    setPersons(persons.map(person => person.id !== newNumberOldName.id ? person : newNumberOldName))\n\n                    setNotification([`Changed ${newNumberOldName.name}'s number!`, 'green'])\n                    setTimeout(() => {\n                        setNotification([null, 'green'])\n                    }, 5000)\n                })\n                .catch(error => {\n                    setNotification([`Information of ${person.name} has already been removed from server`,\n                        'red'])\n                    setTimeout(() => {\n                        setNotification([null, 'green'])\n                    }, 5000)\n                    setPersons(persons.filter(p => p.name !== person.name))\n                })\n\n            return\n        }\n\n        const personObject = {\n            name: newName,\n            number: newNumber\n        }\n\n        personService\n            .create(personObject)\n            .then(\n                returnedContact => {\n                    //console.log('CONTACT ADDED TO PHONEBOOK')\n                    setPersons(persons.concat(returnedContact))\n\n                    setNotification([`Added ${returnedContact.name}!`, 'green'])\n                    setTimeout(() => {\n                        setNotification([null, 'green'])\n                    }, 5000)\n\n                    setNewName('')\n                    setNewNumber('+358')\n                }\n            )\n\n\n    }\n\n    const handleNameChange = (event) => {\n        //console.log(event.target.value)\n        setNewName(event.target.value)\n    }\n\n\n    const searchFilter = (person) => (\n        person.name.toLowerCase().match(filterCondition.toLowerCase())\n    )\n\n    const deleteContactById = (name, id) => {\n        const deleteContactB = window.confirm(`Are you sure u want to delete ${name}?`)\n\n        if (deleteContactB) {\n            personService\n                .deleteId(id)\n                .then(() => {\n                    setPersons(persons.filter(person => person.id !== id))\n\n                    setNotification([`Deleted ${name}, GOOD RIDDANCE!`, 'red'])\n                    setTimeout(() => {\n                        setNotification([null, 'green'])\n                    }, 5000)\n                })\n                .catch(error => {\n                    setNotification([`Information of ${name} has already been removed from server`,\n                        'red'])\n                    setPersons(persons.filter(p => p.name !== name))\n\n                    setTimeout(() => {\n                        setNotification([null, 'green'])\n                    }, 5000)\n                })\n        }\n\n\n    }\n\n\n    //const personsToShow = persons.filter(person => person.name.toLowerCase().match(filterCondition.toLowerCase()))\n    const personsToShow = persons.filter(searchFilter)\n\n    return (\n        <div>\n            <h2>Phonebook</h2>\n            <Notification message={notification[0]} msgColor={notification[1]} />\n            <Filter filterValue={filterCondition} filterFunction={setFilterCondition} />\n            <h4>Found</h4>\n            {personsToShow.map((person, i) =>\n                <RenderPerson\n                    key={i}\n                    person={person}\n                    deleteContact={() => deleteContactById(person.name, person.id)}\n                />\n            )}\n\n            <h3>Add new contact</h3>\n            <AddPerson addContactFunction={addContact} newName={newName} handleNameChange={handleNameChange}\n                newNumber={newNumber} setNewNumber={setNewNumber} />\n        </div>\n    )\n}\n\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}